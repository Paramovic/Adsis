Práctica 4 (Administración de Sistemas) 
845107, Toma, Daniel, M, 3, B
875325, Martinez, Victor, M, 3, B

En primer lugar, para la configuración de las máquinas hemos creado tres clones de la misma máquina que de la práctica 3, de las cuales una 
actuará como host de las otras dos. Después, hemos instalado sudo y git como en las prácticas anteriores, añadiendo también openssh-server 
para poder configurar el ssh más adelante. Para que el usuario as pueda utilizar sudo sin contraseña, hemos editado el archivo /etc/sudoers,
añadiendo debajo de la línea de root en user privilege specification, “as   ALL=(ALL:ALL)  NOPASSWD : ALL”. Después, hay que modificar las
direcciones de los adaptadores de red que hemos puesto en cada máquina. Para ello con "ip a", no hemos fijado en el nombre que tiene dentro
de la máquina y hemos añadido en el archivo /etc/network/interfaces lo siguiente: (Este es el caso de debian-1)

auto enp0s8
iface enp0s8 inet static
    address 192.168.56.11
    netmask 255.255.255.0

En las otras dos maquinas hicimos lo mismo, pero cambiando la dirección, siendo 192.168.56.12 en debian-2 y 192.168.56.10 en el host.
Después de haber introducido esto, reiniciamos las conexiones del sistema para que detectara el cambio de dirección IP. Esto lo hicimos con: 
sudo systemctl restart networking. 

A continuación configuramos las máquinas para que el host no pueda conectarse y que solo nos podamos conectar con claves de tipo 
privada/pública. Para ello, hicimos “sudo nano /etc/ssh/sshd_config”. Dentro del fichero, descomentamos la línea PermitRootLogin 
prohibit-password y la modificamos sustituyendo la parte de “prohibit-password” por “no”. También descomentamos la línea de 
AuthorizedKeysFile y quitamos el segundo .ssh, debido a que ya no está mantenida y por último también descomentamos la línea de 
PasswordAutthentication y poniéndola a no en vez de a yes que es lo que estaba. Con estos tres cambios, el ssh se puede realizar sin pedir 
ninguna contraseña. 

Posteriormente, hemos creado claves públicas para las maquinas de debian-1 y debian-2. Para ello hemos utilizado el siguiente comando: 
“ssh-keygen -t ed25519 -C “debian-1” ” en caso de debian-2. De esta manera, generamos una clave que permita conectar con debian-1. 
Hemos puesto el -t para especificar el tipo de cifrado; que es ed25519 y con -C lo que hacemos es especificar un comentario, que es debian-1, 
qué es el nombre por el que reconocemos la máquina. Estan creadas las claves, pero falta por pasarle la información correspondiente a 
debiam-1 para que pueda establecer el ssh con debian-2 y adaptar parte de la información en debian-2. En debian-2, para que reconozca la
clave creada como una clave váñida, tenemos que hacer “mv id_ed25519.pub authorized_keys” con lo que movemos la clave pública al archivo 
authorized_keys. También hay que pasar la clave privada a debian-1. Para ello hemos modificado el archivo /etc/hosts, poniendo la ip de 
debian-1 debajo de la dirección del usuario as-base y confirmando que se ha guardado correctamente mediante ping debian-1.

Posteriormente le pasamos la calve privada a debian-1 mediante los comandos: “nc -lvnp 9000 > id_as_ed25519” en debian-1, 
“nc debian-1 9000 < id_ed25519” en debian-2. De esta manera, debian-1 tiene la clave privada de debian-2 en id_as_ed25519. Después, 
reiniciamos el ssh y establecemos para que debian-2 tenga ssh activo constantemente con los siguiente comandos: 
“sudo systemctl restart sshd”, “systemctl status ssh” (miramos si esta activo el ssh) y “sudo systemctl enable ssh”.

Ahora en debian-1 hacemos le damos permisos de lectura y escritura  con “chmod 600 id_as_ed25519” y 
con “ssh -i /home/as/.ssh/id_as_ed25519 debian-2” nos conectamos con debian-2.

Volvemos a repetir lo mismo pero a la inver, ahora tenemos que generar las claves con debian-1 y mandarselas a debian-2.
Una vez hecho esto, pasamos a la maquina host. En ella en el archivo /etc/hosts, hemos puesto las direcciones de debian-1 y de debian-2, 
hemos vuelto a generar las claves, pero esta vez le hemos pasado la clave publica a ambas maquinas y las hemos añadido en el archivo 
authorized_keys, para que de esta manera, tambieén admitan al host como dirección valida. Lo único que falta por hacer es crear un archivo 
en el host que sea id_as_ed25519, que sea una copia de id_ed25519, que es el archivo donde se encuentra la clave privada. 

Y haciendo “ssh -i /home/as/.ssh/id_ed25519 as@192.168.56.11”, nos conectamos a debian-1 y con “ssh -i /home/as/.ssh/id_ed25519 as@192.168.56.12” 
nos conectamos a debian-2.

Por último, hemos creado un script basándonos en el de la práctica anterior. 
En este, primero comprobamos si nos pasan los tres argumentos (usuario, contraseña y nombre completo del usuario) y en caso contrario, 
salimos de la ejecución del script. 

if [[ "$#" -ne 3 ]]; then
                    exit 1
fi


A continuación realizamos un bucle, en el que mientras nos lleguen direcciones ip, buscamos dicha dirección ip y extraemos su nombre. 
Después comprobamos si dicha máquina está conectada evitando que el resultado de este salga por la salida estándar.  
En caso de que el ping devuelva 0, es decir, que la máquina sí que está conectada; utilizamos ssh para conectarnos a la máquina remota 
utilizando la clave privada que se encuentre en "$HOME/.ssh/id_as_ed25519" y ejecutamos el script de la práctica 3 pasándole como 
argumentos la opción [-s/-u] y el fichero de usuarios ("/ruta/al/path/practica_3.sh "$1" "$2"") .

En caso de que el ping no sea correcto, escribimos un mensaje de error en la salida estándar.